from __future__ import annotations

from typing import Optional, Protocol

from app.domain.doc_units.entities import DocUnit, HierarchyNode, AssetPointer
from app.domain.doc_units.value_objects import DocUnitId


class DocUnitRepository(Protocol):
    def list_units(self) -> list[DocUnit]: ...
    def get_unit(self, unit_id: DocUnitId) -> Optional[DocUnit]: ...
    def save_unit(self, doc_unit: DocUnit) -> None: ...
    def delete_unit(self, unit_id: DocUnitId) -> None: ...


class DocUnitHierarchyRepository(Protocol):
    def get_hierarchy(self, unit_id: DocUnitId) -> HierarchyNode: ...
    def save_hierarchy(self, unit_id: DocUnitId, hierarchy: HierarchyNode) -> None: ...


class ActiveDocUnitStore(Protocol):
    def get(self) -> Optional[DocUnitId]: ...
    def set(self, unit_id: Optional[DocUnitId]) -> None: ...


class MediaStore(Protocol):
    def import_temp(self, source_path: str) -> AssetPointer: ...
    def promote(self, pointer: AssetPointer) -> AssetPointer: ...
    def resolve_path(self, pointer: AssetPointer) -> str: ...
    def cleanup_temp(self) -> None: ...
    def list_final_assets(self) -> list[str]: ...
    def delete_asset(self, path_hint: str) -> None: ...
